print("hello")
hwepf
dsfsa
x<- -29
x
y=4
y
x <- (1,7,3,56)
x <- v(1,7,3,56)
a <- v(1,7,3,56)
a <- c(1,7,3,56)
x <- c(1,7,3,56)
x
a
gc()
gc()
install.packages("readxl")
plot(NA, xlim = c(0,1), ylim = c(0,1)) # sets up a plot
x = c(0.2,0.8,0.7) # x-coordinate of the risks
y = c(0.2,0.1,0.7) # y-coordinate of the risks
points(x=x, y=y, pch = 19) # plot the risk points
segments(x0 = x[1], x1 = x[2], y0 = y[1], y1 = y[2]) # draws a line between risk poin 1 and 2
segments(x0 = x[2], x1 = x[3], y0 = y[2], y1 = y[3]) # draws a line between risk poin 2 and 3
segments(x0 = x[3], x1 = x[1], y0 = y[3], y1 = y[1]) # draws a line between risk poin 3 and 1
pbeta(0.80, 29, 9)
1×(3/8) + 2×(15/56) + 3×(5/28) + 4×(3/28) + 5×(3/56) + 6×(1/56)
1*(3/8) + 2*(15/56) + 3*(5/28) + 4*(3/28) + 5*(3/56) + 6*(1/56)
install . packages (" ISLR ")
install.packages (" ISLR ")
install.packages ("ISLR")
library ( ISLR )
library (ISLR)
library (ISLR)
library(ISLR)
data(College)
College
College$Accept
min_accept <- min(College$Accept)
max_accept <- max(College$Accept)
min_accept
max_accept
min_accept <- min(College$Accept)
max_accept <- max(College$Accept)
min_accept
max_accept
min(College$Accept)
max(College$Accept)
mean(College$Accept)
sd(College$Accept
)
?hist
hist(College$Accept, breaks=17,
main="Applications Accepted",
xlab="Number Accepted")
hist(College$Accept, breaks = 17,
main = "Histogram of Accepted Applications",
xlab = "Number of Applications Accepted",
col = "lightblue", border = "black")
hist(College$Accept, breaks=17,
main="Applications Accepted",
xlab="Number Accepted")
hist(College$Accept, breaks = 17,
main = "Histogram of Accepted Applications",
xlab = "Number of Applications Accepted",
col = "lightblue", border = "black")
hist(College$Accept, breaks=17,
main="Applications Accepted",
xlab="Number Accepted")
1 - pexp(2000, rate=1/2018.804)
exp(-2000 / 2018.804)
exp(-2000 / 2018.804)
exp(-2000 / 2018.804)
setwd("C:/Users/VJ/Desktop/UNSW-Courses/MATH5845-Time Series/Tutorials and R code/Week 4 Tutorial, Exercises and R Codes-20250704")
library(astsa)
#data(package="astsa")
library(itsmr)
library(forecast)
plot(gtemp_land, type="o", ylab="Global Temperature Deviations")
acf2(gtemp_land)
```
diff_gtemp_land= diff(gtemp_land)
plot(diff_gtemp_land, type="o", ylab="Global Temperature Deviations")
acf2(diff_gtemp_land)
mean(diff_gtemp_land)
# 0.01595376
options(tinytex.verbose = TRUE)
lynx=lynx
par(mfrow=c(2,1))
plot.ts(lynx, ylab="No.", main="Numbers of Lynx Trapped")
plot.ts(log(lynx), ylab="log(No.)", main="Log(Numbers) of Lynx Trapped")
par(mfrow=c(2,1))
acf(log(lynx), ylab="ACf", main="ACF of log transformed time series")
pacf(log(lynx), ylab="PACF", main="PACF of log transformed time series")
plot.ts(diff(log(lynx),10))
lynx=lynx
par(mfrow=c(2,1))
plot.ts(lynx, ylab="No.", main="Numbers of Lynx Trapped")
plot.ts(log(lynx), ylab="log(No.)", main="Log(Numbers) of Lynx Trapped")
par(mfrow=c(2,1))
acf(log(lynx), ylab="ACf", main="ACF of log transformed time series")
pacf(log(lynx), ylab="PACF", main="PACF of log transformed time series")
# Although it is suggested that there is a cyclical behaviour of about 9–10
# years per cycle in this dataset, differencing to remove the cyclic behavior
# does not help.Give it a try.
plot.ts(diff(log(lynx),10))
loglynx.ARmodel<-ar.yw(log(lynx))
loglynx.ARmodel
polyroot(c(1,-loglynx.ARmodel$ar)) #
abs(polyroot(c(1,-loglynx.ARmodel$ar)))
par(mfrow=c(2,2))
resids<-loglynx.ARmodel$resid[-(1:12)]
ts.plot(resids,type="h")
acf(resids,lag.max=30,main="")
pacf(resids,lag.max=30,main="")
qqnorm(resids)
cbind(loglynx.ARmodel$ar,diag(loglynx.ARmodel$asy.var.coef)^0.5)
```{r}
loglynx.AR.mle.constrained<-arima(log(lynx),order=c(11,0,0), fixed=c(rep(NA,4),
rep(0,5),rep(NA,3)),method="ML")
loglynx.AR.mle.constrained
polyroot(c(1,-loglynx.AR.mle.constrained$coef[1:11]))
abs(polyroot(c(1,-loglynx.AR.mle.constrained$coef[1:11])))
armod<-c(0.373, 0.114) # AR(2) for lag 1 diff of DJ Utilities Index
mamod<-c(0.2279, -0.2488)
# mamod<-NULL # no moving average component.
sdmod<-sqrt(0.1796)
nsamples<-100 # 1000 samples from ARMA(2,2)
abs(polyroot(c(1,-armod))) # Causality
abs(polyroot(c(1,mamod))) # invertibility
par(mfrow=c(2,1))
acfmod<-ARMAacf(ar=armod,ma=mamod,lag.max=15)
pacfmod<-ARMAacf(ar=armod,ma=mamod,lag.max=15,pacf=TRUE)
# Compare against ACF, PACF for some samples....
for(i in 1:10){
par(mfrow=c(3,2))
plot(acfmod, type="h",xlab="lag",ylim=c(-1,1))
abline(h=0)
title("Theoretical ACF")
plot(pacfmod, type="h",xlab="lag",ylim=c(-1,1))
abline(h=0)
title("Theoretical PACF")
x<-arima.sim(n = nsamples, list(ar = armod, ma = mamod),
sd = sdmod)
acf(x,lag.max=15, main=paste("Sample Path "))
pacf(x,lag.max=15, main=paste("Sample Path "))
ts.plot(x, main=paste("Sample Path "))
}
wave.dat<-read.table("wave.dat",header=T)
setwd("C:/Users/VJ/Desktop/UNSW-Courses/MATH5845-Time Series/Tutorials and R code/Week 3 Tutorial, Exercises and R Codes-20250704")
wave.dat<-read.table("wave.dat",header=T)
attach(wave.dat)
# plot full time series and check acf, pacf
par(mfrow=c(3,1))
plot(ts(waveht))
title("Wave Height over 39.7 seconds")
acf(waveht)
pacf(waveht)
par(mfrow=c(3,2))
for (blocknum in 1:6){
blocktimes<-(blocknum-1)*66+1:66
ts.plot(waveht[blocktimes])
abline(v=0)
}
par(mfrow=c(3,2))
for (blocknum in 1:6){
blocktimes<-(blocknum-1)*66+1:66
acf(waveht[blocktimes])
}
waveht.armod<-ar.yw(waveht)
waveht.armod.summary<-cbind(waveht.armod$ar,diag(waveht.armod$asy.var.coef)^0.5)
colnames(waveht.armod.summary)<-c("phi","s.e.")
round(waveht.armod.summary,3)
abs(polyroot(c(1,-waveht.armod$ar))) # check stationarity of fit!
# Fitting the AR(13) with MLE:
waveht.ar13MLEfit<-arima(waveht,order=c(13,0,0), method="ML")
waveht.ar13MLEfit
# Check if residuals from best AR model are white noise, Gaussian.
par(mfrow=c(2,2))
ts.plot(waveht.armod$resid,type="h")
acf(waveht.armod$resid,na.action=na.pass)
pacf(waveht.armod$resid,na.action=na.pass)
qqnorm(waveht.armod$resid)
waveht.arma<-arima(waveht,order=c(2,0,1), method="ML")
waveht.arma
# compare variance of 1-step prediction with best AR model:
waveht.arma$sigma2  # variance of innovations for ARMA model
waveht.armod$var.pred # variance of innovations for AR model
# which is the winner?
# Check if residuals from ARMA model are white noise, Gaussian.
par(mfrow=c(2,2))
ts.plot(waveht.arma$resid,type="h")
acf(waveht.arma$resid,na.action=na.pass)
pacf(waveht.arma$resid,na.action=na.pass)
qqnorm(waveht.arma$resid)
